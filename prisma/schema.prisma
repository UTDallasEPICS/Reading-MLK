// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

// standard user profile 
model User {
  id             Int     @id @default(autoincrement())
  user_name      String  @unique // should have one upper case and lower case alongside a number
  first_name     String
  last_name      String
  preferred_name String?
  email  String  @unique // should hold the email of the private account @map("email")
  // client_cuid    String  @map("client_cuid")
  role           String

  Parents  ParentProfile?
  // Children StudentProfile?
  Faculty  FacultyProfile?
  Admin    AdminProfile?

  @@map("users")
}

// parent profile
model ParentProfile {
  id                   Int             @id @default(autoincrement())
  zipcode              String
  yearly_income        String? /// must be optional to give the parent income for sensitivity issues // changed to string to allow for more dynamic input
  birth_date           DateTime?       @default(now())
  average_number_books Int /// average number of books read to child (before they registered with program/school and this will not be changed)
  phone_number         String          @unique /// parent should provide their mobile for easy contact their extension is not required (we are assuming they have a US extension)
  gender               String
  marital_stat         String? /// martial status of the parent (will be optional choice)
  social_media         String?         @unique /// could be other social media handle but should ask for twitter(X) handle (most likely social media handle they have)
  user_id              Int             @unique
  User                 User            @relation(fields: [user_id], references: [id])
  ParentToChild        ParentToChild[]

  @@map("parent_profile")
}

// teacher profile (principle will also have a faculty profile)
model FacultyProfile {
  id            Int     @id @default(autoincrement())
  district      String
  dual_lang     Boolean /// True if they are spanish or other language teacher with non-english kids, otherwise false to indicate they are english speaking teachers      
  faculty_email String  @unique
  school_name   String
  phone_number  String
  department    String
  grade         String // multi to indicate that they teach multiple 

  user_id        Int              @unique
  Faculty        User             @relation(fields: [user_id], references: [id])
  TeacherToClass TeacherToClass[]

  @@map("faculty_profile")
}

// registered students profile 
model StudentProfile {
  id          Int       @id @default(autoincrement())
  age         Int
  grade       Int /// preschool should be given 0 to denote their grade level
  reading_lvl Int /// should reference AR level to indicate reading level
  birth_date  DateTime? @default(now())
  gender      String
  school_name String /// asssume that all the school names will be elementary schools so we should ask them to give the name of the school 
  school_dist String /// example format should be GISD (garland independent school district)
  pref_lang   String? /// drop down option for either english, spanish(espanol), or other (only temporary until we can get more info on what languages they speak)
  first_name  String
  last_name   String
  // pref_name   String

  // user_id Int  @unique
  // Student User @relation(fields: [user_id], references: [id])

  ParentToChild ParentToChild[]
  Classes       StudentToClass[]

  @@map("student_profile")
}

// model to hold the administrators from Friends of MLK
model AdminProfile {
  id          Int    @id @default(autoincrement())
  admin_email String @unique

  admin_id Int  @unique
  Admin    User @relation(fields: [admin_id], references: [id])

  @@map("admin_profile")
}

// class model to create relation between teacher and student (should be one-to-many)
model Class {
  id         Int              @id @default(autoincrement())
  class_name String /// example: Bayard class
  class_year Int
  Teacher    TeacherToClass[]
  Student    StudentToClass[]

  @@map("classes")
}

// join table for teacher to class relationship
model TeacherToClass {
  class_id   Int
  teacher_id Int
  Class      Class          @relation(fields: [class_id], references: [id])
  Teacher    FacultyProfile @relation(fields: [teacher_id], references: [id])

  @@id([class_id, teacher_id])
  @@map("teacher_to_classes")
}

// join table for student to class relationship
model StudentToClass {
  class_id   Int
  student_id Int
  Class      Class          @relation(fields: [class_id], references: [id])
  Student    StudentProfile @relation(fields: [student_id], references: [id])

  @@id([class_id, student_id])
  @@map("student_to_classes")
}

// join table for relationship between parents and child (student) (should be one-to-many)
model ParentToChild {
  parent_id Int
  child_id  Int
  Parent    ParentProfile  @relation(fields: [parent_id], references: [id])
  Child     StudentProfile @relation(fields: [child_id], references: [id])

  @@id([parent_id, child_id])
  @@map("parent_to_kids")
}
