// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// OFFICIAL USER TABLES (approved by rae)
// Students: username, email, FN, LN, PN, Bday, zipcode, school dist, school, gender, acccreationdate, startingreadinglevel, preflang, childtoparents, childtoteacher
// Parents: username, email, FN, LN, PN, Bday, zipcode, gender, acccreationdate, parenttochild, parenttoteacher
// Teachers: username, email, FN, LN, PN, Bday, zipcode, school dist, school, gender, acccreationdate, teachertochild, teachertoparent
// EMAIL IS A UNIQUE IDENTIFIER!! accounts attached to the same email have seperate usernames

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user contains data that ALL accounts need regardless of type-
// profile tables contain the specifics each type of account needs
// UNIQUE EMAIL table - contains shared information for all accounts under one email
model User {
  email          String   @unique @id // Primary key using email
  first_name     String
  last_name      String
  preferred_name String
  gender         String
  birth_date     DateTime @default(now())
  creationDate   DateTime @default(now())

  // Relations to profile tables
  parentProfiles  ParentProfile[]
  teacherProfiles TeacherProfile[]
  studentProfiles StudentProfile[]

  @@map("users")
}

// Parent profile - can have multiple parent profiles per email
model ParentProfile {
  id       Int    @id @default(autoincrement())
  zipcode  String
  username String @unique
  
  // Foreign key to User table
  user_email String
  user       User   @relation(fields: [user_email], references: [email], onDelete: Cascade)

  // Relationships
  ParentToStudent ParentToStudent[]
  ParentToTeacher ParentToTeacher[]
  
  @@map("parent_profile")
}

// Teacher profile - can have multiple teacher profiles per email
// WARNING- teachers do not make accounts on the same as students they can hack in
model TeacherProfile {
  id          Int    @id @default(autoincrement())
  zipcode     String
  username    String @unique
  school_dist String
  school_name String
  
  // Foreign key to User table
  user_email String
  user       User   @relation(fields: [user_email], references: [email], onDelete: Cascade)

  // Relationships
  TeacherToStudent TeacherToStudent[]
  TeacherToParent  ParentToTeacher[]
  
  @@map("teacher_profile")
}

// Student profile - can have multiple student profiles per email
model StudentProfile {
  id                     Int     @id @default(autoincrement())
  username               String  @unique
  zipcode                String?
  school_dist            String
  school_name            String
  starting_reading_level String
  preferred_language     String
  
  // Foreign key to User table
  user_email String
  user       User   @relation(fields: [user_email], references: [email], onDelete: Cascade)

  // Relationships
  StudentToTeacher TeacherToStudent[]
  StudentToParent  ParentToStudent[]
  
  @@map("student_profile")
}

// Join tables for many-to-many relationships
model ParentToStudent {
  parent_id  Int
  student_id Int
  
  parent  ParentProfile  @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  student StudentProfile @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([parent_id, student_id])
  @@map("parent_to_student")
}

model ParentToTeacher {
  parent_id  Int
  teacher_id Int
  
  parent  ParentProfile  @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  teacher TeacherProfile @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@id([parent_id, teacher_id])
  @@map("parent_to_teacher")
}

model TeacherToStudent {
  teacher_id Int
  student_id Int
  
  teacher TeacherProfile @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  student StudentProfile @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([teacher_id, student_id])
  @@map("teacher_to_student")
}

// class model to create relation between teacher and student (should be one-to-many)
// model Class {
//   id         Int              @id @default(autoincrement())
//   class_name String /// example: Bayard class
//   class_year Int
//   Teacher    TeacherToClass[]
//   Student    StudentToClass[]

//   @@map("classes")
// }
// Models for reading quiz related things

model Book {
  id         Int    @id @default(autoincrement())
  book_title String
  author     String
  isbn       String @unique
  page_count Int

  Videos Video[]
  @@map("books")
}

model Video {
  id         Int    @id @default(autoincrement())
  vid_length Int
  url        String
  book_id    Int    
  Book       Book   @relation(fields: [book_id], references: [id])

  @@map("video_form")
}

model Quiz {
  id        Int            @id @default(autoincrement())
  questions Question[]
  responses QuizResponse[]

  @@map("quizzes")
}

model Question {
  id       Int    @id @default(autoincrement())
  quiz_id  Int
  text     String
  feedback String
  quiz     Quiz   @relation(fields: [quiz_id], references: [id])
  score    Int

  // Question types
  MultipleChoice MCQuestion?
  FreeResponse   FRQuestion?

  // Responses
  mcAnswers MCAnswer[]
  frAnswers FRAnswer[]

  @@map("questions")
}

model MCQuestion {
  id          Int        @id @default(autoincrement())
  question_id Int        @unique
  options     MCOption[]
  Question    Question   @relation(fields: [question_id], references: [id])

  @@map("multiple_choice_question")
}

model MCOption {
  id         Int        @id @default(autoincrement())
  questionId Int
  text       String
  isCorrect  Boolean // @default(false)
  mcQuestion MCQuestion @relation(fields: [questionId], references: [id])

  @@map("multiple_choice_options")
}

model FRQuestion {
  id          Int      @id @default(autoincrement())
  question_id Int      @unique
  Question    Question @relation(fields: [question_id], references: [id])

  @@map("free_response_question")
}

model QuizResponse {
  id               Int            @id @default(autoincrement())
  studentProfileId Int
  quizId           Int
  StudentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id])
  quiz             Quiz           @relation(fields: [quizId], references: [id])
  MCAnswer         MCAnswer[]
  FRAnswer         FRAnswer[]

  @@map("quiz_responses")
}

model MCAnswer {
  id             Int          @id @default(autoincrement())
  quizResponseId Int
  questionId     Int
  selectedOption String
  quizResponse   QuizResponse @relation(fields: [quizResponseId], references: [id])
  question       Question     @relation(fields: [questionId], references: [id])

  @@map("multiple_choice_answers")
}

model FRAnswer {
  id             Int          @id @default(autoincrement())
  quizResponseId Int
  questionId     Int
  responseText   String       @db.Text
  quizResponse   QuizResponse @relation(fields: [quizResponseId], references: [id])
  question       Question     @relation(fields: [questionId], references: [id])

  @@map("free_response_answers")
}