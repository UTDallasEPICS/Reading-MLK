
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

// standard user profile 
model User {
  id          Int @id @default(autoincrement())
  user_name   String @unique // should have one upper case and lower case alongside a number
  email       String @unique // should hold the email of the private account
  client_cuid String @map("client_cuid")
  role        String

  @@map("users")
}

// parent profile
model ParentProfile {
  id             Int @id
  zipcode        Int 
  yearly_income  Int? /// must be optional to give the parent income for sensitivity issues
  birth_date     DateTime?
  avg_num_book   Int /// average number of books read to child (before they registered with program/school and this will not be changed)
  password       Int
  phone_number   String @unique /// parent should provide their mobile for easy contact their extension is not required (we are assuming they have a US extension)
  gender         String 
  marital_stat   String? /// martial status of the parent (will be optional choice)
  first_name     String 
  last_name      String
  email          String
  social_media   String? @unique /// could be other social media handle but should ask for twitter(X) handle (most likely social media handle they have)

  ParentToChild  ParentToChild[] 
  @@map("parent_profile")

}

// teacher profile (principle will also have a faculty profile)
model FacultyProfile{
  id            Int    @id
  district      String
  dual_lang     Boolean /// True if they are spanish or other language teacher with non-english kids, otherwise false to indicate they are english speaking teachers      
  faculty_email String @unique
  first_name    String
  last_name     String
  school_name   String
  phone_number  String
  department    String
  grade         String // multi to indicate that they teach multiple 

  TeacherToClass  TeacherToClass[]
  @@map("faculty_profile")
}

// registered students profile 
model StudentProfile{
  id 	        Int @id
  age         Int
  grade       Int /// preschool should be given 0 to denote their grade level
  reading_lvl Int /// should reference AR level to indicate reading level
  birth_date  DateTime?
  gender      String /// note that the gender should be have drop down option for M = male, F = female, O = other (should probably talk with sponsor about making this voluntary or expanding options)
  school_name String /// asssume that all the school names will be elementary schools so we should ask them to give the name of the school 
  school_dist String /// example format should be GISD (garland independent school district)
  pref_lang   String? /// drop down option for either english, spanish(espanol), or other (only temporary until we can get more info on what languages they speak)
  first_name  String
  last_name   String
  pref_name   String

  Parent       ParentToChild[]
  Student	     StudentToClass[]
  @@map("student_profile")
}

// model to hold the administrators from Friends of MLK
model AdminProfile{
  id    Int    @id
  admin_email String @unique

 @@map("admin_profile")
}

// class model to create relation between teacher and student (should be one-to-many)
model Class{
id	Int	@id
class_name	String /// example: Bayard class
class_year	Int
Teacher 	TeacherToClass[] 
Student	  StudentToClass[] 
@@map("classes")
}

// join table for teacher to class relationship
model TeacherToClass{
  id         Int @id
  class_id   Int
  teacher_id Int
  Class Class @relation(fields: [class_id], references: [id])
  Teacher FacultyProfile @relation(fields: [teacher_id], references: [id])
  @@map("teacher_to_classes")
}

// join table for student to class relationship
model StudentToClass{
  id         Int @id
  class_id   Int 
  student_id Int
  Class    Class          @relation(fields: [class_id], references: [id])
  Student  StudentProfile @relation(fields: [student_id], references: [id])  
  @@map("student_to_classes")
}

// join table for relationship between parents and child (student) (should be one-to-many)
model ParentToChild {
  id          Int @id
  parent_id   Int
  child_id    Int 
  Parent      ParentProfile    @relation(fields:[parent_id], references:[id])
  Child       StudentProfile   @relation(fields: [child_id], references: [id])
  @@map("parent_to_kids")
}
